# 第一章、輸出輸入以及變數和常用語法<br>
在一開始要先知道<br>

**1.程式碼在任何一個凾式內都是由上到下，由左到右執行**<br>

**2.分號(;)是代表一句話的結束。**<br>

**3.在一句話內，除了字串以外，空格和換行(enter)都是可以被忽視的**<br>

### 宣告<br>
宣告就是告訴電腦我需要一個甚麼樣的變數<br>
其中"="可以視為後者指定給前者<br>
通用語法為<br>
[型態] (名字)=(初始值);<br>
<br>

宣告一個整數a來說<br>
```cpp=
int a=3;//3指定給a
```

常用型態有下面七種(未來會更多)<br>

|              型態              |                                           內容                                            |
|:------------------------------:|:-----------------------------------------------------------------------------------------:|
|              int               |                      一個整數，範圍為-2,147,483,648 ~ 2,147,483,647                       |
| long long int(宣告時可省略int) | 一個整數，但運算時稍慢於int，範圍為-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 |
|             float              |                                   一個小數(浮點數)範圍                                    |
|             double             |                       一個小數，但比float長，小心可能會有捨位的問題                       |
|              bool              |                            一個布林值，只會有0(false)或1(true)                            |
|              char              |                                       字元，例如'a'                                       |
|               string                |                           字串，例如"gAy"                                                               |


### 輸出輸入
C++的輸出輸入是不需要處理型態的，因為在宣告的時候就已經告訴電腦了<br>

### 輸出
```cpp=
cout<<"字串"<<endl;
cout<<'字元'<<"\n";
//endl表示換行，並清除緩衝區
//"\n"表示換行，不清除緩衝區(速度較快)
```

### 輸入
```cpp=
int a;//宣告
cin>>a;//讀入
 
cin>>a>>b;
cout<<a<<b<<endl;
```
<br>
**例題:**
輸出"hello, world"，不需要變數和讀入
```cpp=
#include <bits/stdc++.h>
using namespace std;
int main()
{
    cout<<"hello, world"<<endl;
}
```

### 常用語法
#### 四捨五入&&轉換型態
對a做四捨五入n位<br>
語法如下<br>
cout<<fixed<<setprecision(n)<<a;<br>
當今天我想把一個型態轉成另一個型態(例如int->float)，會用這個語法<br>
(想轉換的型態)[原本的變數或數字]<br>

範例程式
```cpp=
#include <bits/stdc++.h>
using namespace std;
signed main()
{
    int a=4;
    cout<<fixed<<setprecision(4)<<(float)a;//output:4.0000
}

```

